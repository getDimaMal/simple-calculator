(()=>{"use strict";var n={494:(n,e,t)=>{t.d(e,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),s=t.n(a)()(o());s.push([n.id,".btn{width:calc(25% - 10px);box-sizing:border-box;margin:5px;padding:20px;border:none;border-radius:5px;background-color:#e0e1e6;font-size:1.5em;text-align:center;cursor:pointer}.btn:hover{background-color:#c4c6cf}.btn:active{transform:translateY(2px)}","",{version:3,sources:["webpack://./src/components/Button/butoon.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAEA,KACE,sBAAA,CACA,qBAAA,CAEA,UAAA,CACA,YAAA,CAEA,WAAA,CACA,iBAAA,CACA,wBCRwB,CDUxB,eAAA,CACA,iBAAA,CAEA,cAAA,CAEA,WACE,wBAAA,CAGF,YACE,yBAAA",sourcesContent:['@import "src/styles/variables";\n\n.btn {\n  width: calc(25% - 10px);\n  box-sizing: border-box;\n\n  margin: 5px;\n  padding: 20px;\n\n  border: none;\n  border-radius: 5px;\n  background-color: $button-background-color;\n\n  font-size: 1.5em;\n  text-align: center;\n\n  cursor: pointer;\n\n  &:hover {\n    background-color: darken($button-background-color, 10%);\n  }\n\n  &:active {\n    transform: translateY(2px);\n  }\n}\n',"//Colors\n$body-background-color: #f3f3f3;\n\n$button-background-color: #e0e1e6;\n\n$display-background-color: #fff;\n\n$font-color: #000;\n"],sourceRoot:""}]);const i=s},622:(n,e,t)=>{t.d(e,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),s=t.n(a)()(o());s.push([n.id,".display{margin:20px 5px;padding:10px;border-radius:5px;background-color:#fff;font-size:2rem;text-align:right}","",{version:3,sources:["webpack://./src/components/Display/display.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAEA,SACE,eAAA,CACA,YAAA,CAEA,iBAAA,CACA,qBCFyB,CDIzB,cAAA,CACA,gBAAA",sourcesContent:['@import "src/styles/variables";\n\n.display {\n  margin: 20px 5px;\n  padding: 10px;\n\n  border-radius: 5px;\n  background-color: $display-background-color;\n\n  font-size: 2rem;\n  text-align: right;\n}',"//Colors\n$body-background-color: #f3f3f3;\n\n$button-background-color: #e0e1e6;\n\n$display-background-color: #fff;\n\n$font-color: #000;\n"],sourceRoot:""}]);const i=s},664:(n,e,t)=>{t.d(e,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),s=t.n(a)()(o());s.push([n.id,'*{margin:0;padding:0}html{font-size:16px;font-family:"Helvetica Neue",sans-serif;color:#000}body{background-color:#f3f3f3}',"",{version:3,sources:["webpack://./src/styles/main.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAEA,EACE,QAAA,CACA,SAAA,CAGF,KACE,cAAA,CACA,uCAAA,CACA,UCHW,CDMb,KACE,wBCbsB",sourcesContent:['@import "variables";\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 16px;\n  font-family: "Helvetica Neue", sans-serif;\n  color: $font-color;\n}\n\nbody {\n  background-color: $body-background-color;\n}',"//Colors\n$body-background-color: #f3f3f3;\n\n$button-background-color: #e0e1e6;\n\n$display-background-color: #fff;\n\n$font-color: #000;\n"],sourceRoot:""}]);const i=s},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);r&&s[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},s=[],i=0;i<n.length;i++){var c=n[i],l=r.base?c[0]+r.base:c[0],u=a[l]||0,p="".concat(l," ").concat(u);a[l]=u+1;var d=t(p),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var A=o(f,r);r.byIndex=i,e.splice(i,0,{identifier:p,updater:A,references:1})}s.push(p)}return s}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=t(a[s]);e[i].references--}for(var c=r(n,o),l=0;l<a.length;l++){var u=t(a[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(72),e=t.n(n),r=t(825),o=t.n(r),a=t(659),s=t.n(a),i=t(56),c=t.n(i),l=t(540),u=t.n(l),p=t(113),d=t.n(p),f=t(664),A={};A.styleTagTransform=d(),A.setAttributes=c(),A.insert=s().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=u(),e()(f.A,A),f.A&&f.A.locals&&f.A.locals;var b=t(622),h={};h.styleTagTransform=d(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),e()(b.A,h),b.A&&b.A.locals&&b.A.locals;const v=function(){function n(n){this.props=n;var e=this.props.value;this.display=document.createElement("div"),this.display.classList.add("display"),this.display.innerText=e}return n.prototype.update=function(n){this.display.innerText=n},n.prototype.render=function(){return this.display},n}();var y=function(){function n(n){this.props=n,this.keypad=document.createElement("div")}return n.prototype.renderButtons=function(){for(var n=this.props,e=n.keys,t=n.handlers,r=n.Button,o=function(n,e){var o=new r({label:n,onClick:function(){return t[e](n)}});a.keypad.append(o.render())},a=this,s=0,i=e;s<i.length;s++){var c=i[s];o(c.label,c.type)}},n.prototype.render=function(){return this.renderButtons(),this.keypad},n}();const m=y;var g=t(494),C={};C.styleTagTransform=d(),C.setAttributes=c(),C.insert=s().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=u(),e()(g.A,C),g.A&&g.A.locals&&g.A.locals;const x=function(){function n(n){this.props=n;var e=this.props,t=e.label,r=e.onClick;this.button=document.createElement("button"),this.button.innerText=t,this.button.classList.add("btn"),this.button.addEventListener("click",r)}return n.prototype.render=function(){return this.button},n}();var k=function(n){var e=this;this.props=n,this.displayUpdate=function(n){e.display.update(n)},this.render=function(){var n=document.createElement("div");return n.append(e.display.render()),n.append(e.keypad.render()),n};var t=this.props,r=t.keys,o=t.handlers;this.display=new v({value:"0"}),this.keypad=new m({keys:r,handlers:o,Button:x})},E=function(n){var e=this;this.props=n,this.result=0,this.input="",this.operator=null,this.inputPush=function(n){"."===n&&e.input.includes(".")||(e.input+=n,e.props.onChange(e.input))},this.inputPop=function(){e.input=e.input.slice(0,-1),e.props.onChange(e.input||"0")},this.reset=function(){e.input="",e.operator=null,e.props.onChange("0")},this.inverse=function(){e.input&&(e.input=String(-1*parseFloat(e.input)),e.props.onChange(e.input))}},w=[{label:"C",type:"function"},{label:"+/-",type:"function"},{label:"%",type:"function"},{label:"/",type:"operator"},{label:"1",type:"value"},{label:"2",type:"value"},{label:"3",type:"value"},{label:"x",type:"operator"},{label:"4",type:"value"},{label:"5",type:"value"},{label:"6",type:"value"},{label:"-",type:"operator"},{label:"7",type:"value"},{label:"8",type:"value"},{label:"9",type:"value"},{label:"+",type:"operator"},{label:"⌫",type:"function"},{label:"0",type:"value"},{label:".",type:"value"},{label:"=",type:"operator"}],B=function(){function n(){var n=this;this.handleValue=function(e){n.model.inputPush(e)},this.handleFunction=function(e){var t={C:n.model.reset,"⌫":n.model.inputPop,"+/-":n.model.inverse};e in t&&t[e]()},this.view=new k({keys:w,handlers:{value:this.handleValue,operator:this.handleOperator,function:this.handleFunction}}),this.model=new E({onChange:this.view.displayUpdate})}return n.prototype.handleOperator=function(n){console.log("operator",n)},n.prototype.render=function(){return this.view.render()},n}(),$=function(){function n(){this.calculator=new B}return n.prototype.render=function(){var n=document.createElement("div");return n.append(this.calculator.render()),n},n}();document.addEventListener("DOMContentLoaded",(function(){var n=new $;document.getElementById("root").append(n.render())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,